set nocompatible

runtime plugged/vim-plug/plug.vim
call plug#begin('~/.vim/plugged')

" Plugins
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-pathogen'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'stephpy/vim-php-cs-fixer'

" Themes
Plug 'sickill/vim-monokai'
Plug 'w0ng/vim-hybrid'

call plug#end()

" Set internal encoding and default encoding for files to utf-8
set encoding=utf-8
setglobal fileencoding=utf-8

filetype plugin indent on
syntax on

" Enable theme
syntax enable
set background=dark
colorscheme hybrid

" Increase the number of history lines that are remembered
set history=1000

" Decrease the timeout to wait for mappings
set timeoutlen=350

" In absence of the statusline show the ruler
set ruler

" Dont wrap lines
set nowrap

" Use relative numbering instead of absolute
set relativenumber

" Allow buffers to be hidden (unsaved) when closing a window
set hidden

" Change <Leader> to space
let mapleader=" "

" Let vim help me with indenting
set smartindent

" Change tabs to 4 spaces
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" Always have 5 lines above or below the cursor when scrolling
set scrolloff=5

" When minimizing a window make it as small as possible
set winminheight=0

" Always show the status line
set laststatus=2

" Enable incremental searching
set incsearch

" Enable search highlighting
set hlsearch

" Dont use case-sensitive search (use smartcase when explicit case-sensitive is needed)
set ignorecase
set smartcase

" When using :split pop new window below and when using :vsplit insert new window right
set splitbelow
set splitright

" Fix my frequently wrong typed Wq (etc.) when quiting vim
command WQ wq
command Wq wq
command W w
command Q q

" Type qq when you want to quit all open windows
cmap qq qa

" Add shortcut for saving readonly files
command WW :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Map F5 to list and select buffers
map <F5> :buffers<CR>:buffer<Space>

" Disable Arrow keys in normal, visual and select and operator pending mode (hjkl training)
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable Arrow keys in insert mode (hjkl training)
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" Enable easy hjkl window navigation in normal mode
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

" Window resizing with arrow keys
nmap <Up> <C-W>-
nmap <Down> <C-W>+
nmap <Left> <C-W>>
nmap <Right> <C-W><

" Enable (up/down) arrow window navigation with ALT key and make the current window
" fullscreen, minimalize the others
nmap <A-up> <C-W>k <C-W>_
nmap <A-down> <C-W>j <C-W>_

" Shorcut for making all windows equal sized
nmap <A-=> <C-W>=

" Create shortcut for Esc in insert mode (`^ makes sure the cursor stays at
" the same position as before the Esc)
imap jk <Esc>
imap kj <Esc>
imap <Tab> <Esc>
inoremap <Esc> <Esc>`^

" Shortcut for easy navigating to begin/end of line
map aa ^
map ;; $

" Grep word under cursor recursively
map <F4> :execute "vimgrep /" . expand("<cword>") . "/j **/.*" <Bar> cw<CR

" NERDTree plugin
map <Leader>e :NERDTree<CR>
let g:NERDTreeShowHidden=1
let g:NERDTreeWinSize=50

" incsearch.vim plugin
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" :h g:incsearch#auto_nohlsearch
" set hlsearch (already set above)
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" fzf plugin
let $FZF_DEFAULT_COMMAND = 'find . -type f | grep -v "cache/" | grep -v "\.git/" | grep -v "\.mat$"'
nnoremap <silent> <C-P> :FZF -x<CR>
